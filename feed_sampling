import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import jax.numpy as jnp
from jax import random, vmap, jit
# Generate sample data: an 8x1000 matrix with values between 0 and 1

def random_entry_in_zeros_array(key, length=11):
    key = random.PRNGKey(key)
    key, key1, key2, key3, key4 = random.split(key, 5)
    zeros_array = jnp.zeros(length)
    random_index = random.randint(key, (), 0, length - 3)
    random_value1 = random.uniform(key1, ())
    random_value2 = random.uniform(key2, ())
    random_value3 = random.uniform(key3, ())
    random_value4 = random.uniform(key4, ())
    zeros_array = zeros_array.at[random_index].set(random_value1)
    zeros_array = zeros_array.at[random_index + 1].set(random_value2)
    zeros_array = zeros_array.at[random_index + 2].set(random_value3)
    #zeros_array = zeros_array.at[random_index + 3].set(random_value4)
    zeros_array = zeros_array / jnp.sum(zeros_array)
    zeros_array = jnp.where((zeros_array < 0.07) & (zeros_array > 0), zeros_array + 0.07, zeros_array)
    zeros_array = zeros_array / jnp.sum(zeros_array)
    return zeros_array

# Convert the matrix to a long-form DataFrame suitable for seaborn
iters = 1000
matrix = vmap(jit(random_entry_in_zeros_array))(jnp.arange(iters))
matrix = jnp.where(matrix>0, jnp.arange(11), jnp.nan)
df = pd.DataFrame(matrix.T, columns=[f'Row {i+1}' for i in range(matrix.shape[0])])

cat = ["C3", "I-C4", "C4", "C5", "C-C5", "C6", "T-C4", "C7", "D-C6", "C8"]

z = matrix.flatten()
# Create a box plot
plt.figure(figsize=(12, 6))
plt.grid(True)
plt.plot(jnp.repeat(jnp.arange(len(matrix)), 11), z, linewidth=2)
plt.tick_params(axis='both', which='major', labelsize=20)
plt.title('Presence of components in randomly sampled feeds', fontsize=26)
plt.xlabel('Sample', fontsize=26)
plt.ylabel('Components', fontsize=26)
plt.yticks(ticks=list(jnp.arange(10)), labels=cat)
plt.show()
